/* -*- Mode: Prolog -*- */
:- include(std).

% ----------------------------------------
% ONTOLOGY
% ----------------------------------------

hierarchy(T,L) :- hierarchy(T,_,L).
hierarchy(digestive_tract,
          segment,
          [esophagus,stomach,intestine=[
                                        small_intestine=[duodenum,jejunum,ileum],
                                        large_intestine=[cecum,colon=[
                                                                      ascending_colon,
                                                                      transverse_colon,
                                                                      sigmoid_colon
                                                                      ],
                                                         rectum,anal_canal]]]).
hierarchy(wall,
          layer,
          [mucosa=[epithelium,lamina_propria,muscularis_mucosa],
           submucosa,
           muscularis_propria=[circular_muscle,longitudinal_muscle],
           serosa]).

% ----------------------------------------
% GRAMMAR
% ----------------------------------------

dt_layer *--> layer, [of], segment/maximal_part_of.
 
segment(@X) --> {segment_member(X)},[@X].
layer(@X) --> {layer_member(X)},[@X].

% ----------------------------------------
% ADDITIONAL AXIOMS
% ----------------------------------------


about *--> {hierarchy(T,G,_),hierarchy_member_type(X,T)}, [X,isa,G] :: X < G.

% axioms for generic segments and layers
%about *--> {continuous_with(X,Y)}, [X,continuous,with,Y] :: X < continuous_with some Y.
%about *--> {adjacent_to(X,Y)}, [X,adjacent,to,Y] :: X < adjacent_to some Y.
about *--> {part_of(X,Y)}, [X,part,of,Y] :: X < part_of some Y.
about *--> {true},[transitivity,of,part_of] :: transitive(part_of).
about *--> {true},[] :: subPropertyOf(maximal_part_of,part_of).

about *-->
        dt_layer(X),{X =::= ( (@LT1) and maximal_part_of some (@S))},
        { adjacent_to( LT1, LT2) },
        dt_layer(Y),{Y =::= ( (@LT2) and maximal_part_of some (@S))}
        :: X < adjacent_to some Y.

about *-->
        dt_layer(X),{X =::= ( (@Layer) and maximal_part_of some (@SX))},
        { continuous_with( SX, SY) },
        dt_layer(Y),{Y =::= ( (@Layer) and maximal_part_of some (@SY))}
        :: X < continuous_with some Y.


% ----------------------------------------
% RULES
% ----------------------------------------

adjacent_to(X,Y) :- hierarchy(wall,L),hierarchy_pair(X,Y,L).
part_of(X,Y) :- hierarchy(T,L),hierarchy_parent(X,Y,[T=L]).

continuous_with(X,Y) :- hierarchy(digestive_tract,L),hierarchy_pair(X,Y,L).

